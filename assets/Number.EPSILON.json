{
  "title": "Number.EPSILON",
  "description": "As close as we can get to 0 without getting to 0.",
  "code": "// Because the computer has limited space to store\n// the representation of floating-point numbers,\n// eventually we get to a value so small that its\n// representation is larger than can be stored.\nconsole.log(1 + .2);\nconsole.log(1 + .02);\nconsole.log(1 + .002);\nconsole.log(1 + .0002);\nconsole.log(1 + .00002);\nconsole.log(1 + .000002);\nconsole.log(1 + .0000002);\nconsole.log(1 + .00000002);\nconsole.log(1 + .000000002);\nconsole.log(1 + .0000000002);\nconsole.log(1 + .00000000002);\nconsole.log(1 + .000000000002);\nconsole.log(1 + .0000000000002);\nconsole.log(1 + .00000000000002);\nconsole.log(1 + .000000000000002);\nconsole.log(1 + .0000000000000002);\n\n// And, it's at this point that we get to a\n// number so small that adding it to 1 does\n// not change the value of 1.\nconsole.log(1 + .00000000000000002);\n\n// Until ECMAscript 6, we did not have access to\n// that number. And, now we do and it's called\n// EPSILON. It's the smallest number possible that,\n// when added to 1, we get a value not equal to 1.\nconsole.log(1 + Number.EPSILON);\n\n// So, let's check to see if EPSILON is greater\n// than the number on line 20.\nconsole.log(Number.EPSILON > .00000000000000002);"
}
