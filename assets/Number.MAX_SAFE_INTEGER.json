{
  "title": "Number.MAX_SAFE_INTEGER",
  "description": "The largest integer to which you can add 1 and get an accurate answer.",
  "code": "// Previous to ECMAscript 6, we had no easy way to\n// know the upper bounds of mathematical\n// calculations. Instead, you had to know the IEEE\n// specification that governs the representation\n// of the numbers and how that standard defined\n// all of the mathematical operations. With ES6,\n// we no longer have to know all that because it\n// provides a constant for us to know the largest\n// integer to which we can add 1 and get an\n// accurate calculation: Number.MAX_SAFE_INTEGER\n\n// With that in mind, we can confidently have\n// ECMAscript calculate the following sum.\nconsole.log(Number.MAX_SAFE_INTEGER + 1);\n\n// However, ECMAscript specifically informs us that\n// the following calculations will yield results\n// that we do not expect.\nconsole.log(Number.MAX_SAFE_INTEGER + 2);\nconsole.log(Number.MAX_SAFE_INTEGER + 3);\nconsole.log(Number.MAX_SAFE_INTEGER + 4);\nconsole.log(Number.MAX_SAFE_INTEGER + 5);\nconsole.log(Number.MAX_SAFE_INTEGER + 6);\n\n// On my computer, MAX_SAFE_INTEGER + 1 and\n// MAX_SAFE_INTEGER + 2 yield the same results!"
}
