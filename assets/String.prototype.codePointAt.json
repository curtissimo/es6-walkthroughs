{
  "title": "String.prototype.codePointAt",
  "description": "Gets the Unicode code point in a string.",
  "code": "// In the days before Unicode, we had 2^8 = 256\n// characters and, then, 2^16 = 65,536 characters\n// in our character sets. We could represent each\n// of those characters as a number, or code, for\n// the specific character encoding we used in\n// our software. Pre-Unicode ECMAscript provides\n// the String.prototype.charCodeAt method to\n// get the integer representations of a character\n// in a string.\nvar ascii = 'Hi, Curtis';\nvar charCode = ascii.charCodeAt(4);\nvar char = String.fromCharCode(charCode);\nconsole.log(charCode, char);\n\n// Then, Unicode came along with its\n// Supplementary Multilingual Plane and its\n// Supplementary Ideographic Plane and more,\n// characters represented by more than one\n// character code which Unicode calls a \"code\n// point\". Now, charCodeAt doesn't work because\n// it expects each character to fit into a\n// number less than 65,536.\nvar unicode = 'Hi, ðŸŒ ';\ncharCode = unicode.charCodeAt(4);\nchar = String.fromCharCode(charCode);\nconsole.log(charCode, char);\n\n// String.prototype.codePointAt exists to resolve\n// the values outside the Basic Multilingual Plane.\nvar codePoint = unicode.codePointAt(4);\nchar = String.fromCodePoint(codePoint);\nconsole.log(codePoint, char);"
}
